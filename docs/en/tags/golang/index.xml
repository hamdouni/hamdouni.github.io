<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Brahim Hamdouni  ·  ابراهيم</title>
    <link>https://brahim.hamdouni.com/en/tags/golang/</link>
    <description>Recent content in golang on Brahim Hamdouni  ·  ابراهيم</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Tue, 27 Mar 2018 00:15:38 +0000</lastBuildDate><atom:link href="https://brahim.hamdouni.com/en/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VS Code loses Go autocompletion on Linux</title>
      <link>https://brahim.hamdouni.com/en/post/2018-03-27-vs-code-loses-go-autocompletion-on-linux/</link>
      <pubDate>Tue, 27 Mar 2018 00:15:38 +0000</pubDate>
      
      <guid>https://brahim.hamdouni.com/en/post/2018-03-27-vs-code-loses-go-autocompletion-on-linux/</guid>
      <description>On my Linux, just after upgrading Go to version 1.9, I lost autompletion functionality in VS Code.
:vscode_completion_not_working
This tip did not work for me.
So let&amp;rsquo;s try to debug it.
First, we close the auto-completion server (see github.com/nsf/gocode ) :
gocode close killall gocode Then we relaunch it as a server in debug mode inside a console :
gocode -debug -s So now, we can see what&amp;rsquo;s happening.
OK, time to try an auto-completion inside VS Code.</description>
    </item>
    
    <item>
      <title>#Docker from scratch, #Golang and Multipart upload</title>
      <link>https://brahim.hamdouni.com/en/post/2018-01-26-minimal-docker-golang-et-le-televersement-multipart/</link>
      <pubDate>Fri, 26 Jan 2018 14:25:23 +0000</pubDate>
      
      <guid>https://brahim.hamdouni.com/en/post/2018-01-26-minimal-docker-golang-et-le-televersement-multipart/</guid>
      <description>To reduce docker container size we can built the image from scratch instead of using bloated images, like debian or worse ubuntu.
But to put a golang binary in it you have to take care of some important stuff. We&amp;rsquo;ll see briefly how to do it. For more details, see Building Minimal Docker Containers For Go Applications
Compile staticaly your go program :
CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -a -installsuffix cgo -o server Your Dockerfile looks like this :</description>
    </item>
    
  </channel>
</rss>
